package twopiradians.blockArmor.common.item;

import java.util.ArrayList;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.item.Item;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.common.registry.GameRegistry;
import twopiradians.blockArmor.common.BlockArmor;

public class ModItems
{
	public static ArrayList<ItemModArmor> allArmors = new ArrayList<ItemModArmor>();

	public static void postInit() 
	{
		ArrayList<ArmorSet> generatedSets = new ArrayList<ArmorSet>();
		ArrayList<ArmorSet> setsToRemove = new ArrayList<ArmorSet>();
		ArrayList<String> registeredNames = new ArrayList<String>();

		for (ArmorSet set : ArmorSet.allSets) {
			String name = set.item.getRegistryName().getResourcePath().toLowerCase().replace(" ", "_");
			if (registeredNames.contains(name))
				setsToRemove.add(set);
			else if (!ArmorSet.autoGeneratedSets.containsKey(set) || ArmorSet.autoGeneratedSets.get(set) == true) {
				if (set.stack.getHasSubtypes())
					name += "_"+set.meta;
				set.helmet = (ItemModArmor) registerItem(new ItemModArmor(set.material, 0, EntityEquipmentSlot.HEAD), name+"_helmet", true);
				set.chestplate = (ItemModArmor) registerItem(new ItemModArmor(set.material, 0, EntityEquipmentSlot.CHEST), name+"_chestplate", true);
				set.leggings = (ItemModArmor) registerItem(new ItemModArmor(set.material, 0,EntityEquipmentSlot.LEGS), name+"_leggings", true);
				set.boots = (ItemModArmor) registerItem(new ItemModArmor(set.material, 0, EntityEquipmentSlot.FEET), name+"_boots", true);
				registeredNames.add(name);
				generatedSets.add(set);
			}
		}
		
		//remove sets with duplicate registry names after loop to prevent concurrency issues
		for (ArmorSet set : setsToRemove)
			ArmorSet.allSets.remove(set);

		System.out.println("[Block Armor] "+generatedSets.size()+" armor sets generated."); //TODO replace with logger
		for (ArmorSet set : generatedSets) 
			System.out.println("- "+set.stack.getDisplayName());
	}

	public static void registerRenders()
	{
		for (ItemModArmor item : allArmors)
			registerRender(item);
	}

	private static Item registerItem(Item item, String unlocalizedName, boolean addToTab) 
	{
		if (item instanceof ItemModArmor)
			allArmors.add((ItemModArmor) item);
		item.setUnlocalizedName(unlocalizedName);
		item.setRegistryName(BlockArmor.MODID, unlocalizedName);
		if (addToTab)
			item.setCreativeTab(BlockArmor.tab);
		GameRegistry.register(item);
		return item;
	}

	private static void registerRender(Item item)
	{		
		if (item instanceof ItemModArmor) {
			ResourceLocation texture = ArmorSet.getTextureLocation((ItemModArmor) item);
			if (texture != null && false) {
				//read item json
				ModelResourceLocation modelLoc = new ModelResourceLocation(BlockArmor.MODID+":" + "auto_generated_boots" , "inventory");
				/*	ResourceLocation jsonLoc = new ResourceLocation(BlockArmor.MODID, "models/item/auto_generated_boots.json");
				IResource iresourceItem = null; 

				try {
					iresourceItem = Minecraft.getMinecraft().getResourceManager().getResource(jsonLoc);
				} catch (IOException e) {
					e.printStackTrace();
				}TextureStitchEvent
				Reader readerItem = new InputStreamReader(iresourceItem.getInputStream(), Charsets.UTF_8);
				JsonObject jsonItem = Streams.parse(new JsonReader(readerItem)).getAsJsonObject();
				JsonObject jsonTextures = jsonItem.getAsJsonObject("textures");
				jsonTextures.remove("layer0");
				jsonTextures.addProperty("layer0", "blockarmor:items/acaciawood_boots");
				try {
					File file = ReflectionHelper.getPrivateValue(Minecraft.class, Minecraft.getMinecraft(), 50); //fileAssets
					file.
					String location = "blockarmor:models/item/auto_generated_boots.json";
					Streams.write(jsonItem, new JsonWriter(new FileWriter(location)));
					Streams.write(jsonItem, new OutputStreamWriter());
				} catch (Exception e) {
					e.printStackTrace();
				}*/

				/*				
				try {
					iresourceItem = Minecraft.getMinecraft().getResourceManager().getResource(jsonLoc);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				readerItem = new InputStreamReader(iresourceItem.getInputStream(), Charsets.UTF_8);
				jsonItem = Streams.parse(new JsonReader(readerItem)).getAsJsonObject();*/
				/*				item.addPropertyOverride(modelLoc, new IItemPropertyGetter() {
					@Override
					public float apply(ItemStack stack, World worldIn, EntityLivingBase entityIn) {
						return stack.getItem() instanceof ItemModArmor ? 1 : 0;
					}

				});
				Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(item, new ItemMeshDefinition()
		        {
		            public ModelResourceLocation getModelLocation(ItemStack stack)
		            {
		                return new ModelResourceLocation("spawn_egg", "inventory");
		            }
		        });
				 */
				Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(item, 0, modelLoc);
			}
		}
		else
			Minecraft.getMinecraft().getRenderItem().getItemModelMesher().register(item, 0, new ModelResourceLocation(BlockArmor.MODID+":" + item.getUnlocalizedName().substring(5), "inventory"));
	}
}